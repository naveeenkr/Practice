/*
    Author: Naveen Singh
    Email : singh.naveen46@gmail.com
*/

#include <iostream>
#include<list>
#include<vector>

class Edge;

class Node{
    int id;
    bool visited;
    std::list<Edge*> outEdges;
    public:
        Node(int id){
            this->id = id;
            this->visited = false;
        }
        void addEdge(Edge* e){
            this->outEdges.push_back(e);
        }
        
        std::list<Edge*> getOutEdges(){
            return this->outEdges;
        }
        int getID() const { return this->id; }
        void setID() { this->id = -1 * this->id; }
        bool getVisited() const { return this->visited; }
        void setVisited() { this->visited = true; }
};

class Edge{
    int cost;
    Node* src;
    Node* dest;
    public:
        Edge(int cost, Node* src, Node* dest) {
            this->cost = cost;
            this->src = src;
            this->dest = dest;
        }
        double getCost() const{
            return this->cost;
        }
        Node* getDest() const{
            return this->dest;
        }
};

class Graph{
    int V;
    std::vector<Node*> vertex;
    public:
        Graph(int v){
            this->V = v;
            vertex.push_back(0);
            for(int i=1;i<V;i++){
                Node *new_node = new Node(i);
                this->vertex.push_back(new_node);
            }
        }
        Node* getNode(int i) const{
            return vertex[i];
        }
};

int main()
{
    int V, E;
    std::cin>>V>>E;
    Graph g(V+1);
    
    for(int i=0;i<E;i++){
        int u, v; double c;
        std::cin>>u>>v>>c;
        Node *s= g.getNode(u);
        Node *e = g.getNode(v);
        Edge *new_edge = new Edge(c, s, e);
        s->addEdge(new_edge);
    }
    
    
    std::cout<<std::endl;
    for(int i=1;i<=V;i++){
        auto oe = g.getNode(i)->getOutEdges();
        for(auto x: oe){
        std::cout<< x->getDest()->getID() << " " << x->getCost()<<std::endl;
    }
    }

    return 0;
}

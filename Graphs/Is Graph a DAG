/*
    Author: Naveen Singh
    Email : singh.naveen46@gmail.com
    
    This file demonstrates a node edge representation of a graph to store multiple data in a node and at an edge. Later it also 
    builds an adjacency list representation of a graph using these nodes and edges. The main function creates a DAG and isDag 
    tests whether this DAG contains cycle or not.
*/

#include <iostream>
#include<list>
#include<vector>

class Edge;

class Node{
    int id;
    bool visited;
    std::list<Edge*> outEdges;
    public:
        Node(int id){
            this->id = id;
            this->visited = false;
        }
        void addEdge(Edge* e){
            this->outEdges.push_back(e);
        }
        
        std::list<Edge*> getOutEdges(){
            return this->outEdges;
        }
        int getID() const { return this->id; }
        void setID() { this->id = -1 * this->id; }
        bool getVisited() const { return this->visited; }
        void setVisited() { this->visited = true; }
        
        void _init_ID(){
            if(this->id < 0) this->id = -1 * this->id;
        }
        void _init_visited(){
            visited = false;
        }
};

class Edge{
    int cost;
    Node* src;
    Node* dest;
    public:
        Edge(int cost, Node* src, Node* dest) {
            this->cost = cost;
            this->src = src;
            this->dest = dest;
        }
        double getCost() const{
            return this->cost;
        }
        Node* getDest() const{
            return this->dest;
        }
};

class Graph{
    int V;
    std::vector<Node*> vertex;
    public:
        Graph(int v){
            this->V = v;
            vertex.push_back(0);
            for(int i=1;i<V;i++){
                Node *new_node = new Node(i);
                this->vertex.push_back(new_node);
            }
        }
        Node* getNode(int i) const{
            return vertex[i];
        }
        void _init_Node(){
            for(int i=1;i<V;i++){
                getNode(i)->_init_ID();
                getNode(i)->_init_visited();
            }
        }
        bool isDAG(Node* n); //it covers DFS

};


bool Graph::isDAG(Node* s){
    s->setVisited();
    s->setID();
    std::cout<<-1 * s->getID() <<" ";
    
    auto outedges = s->getOutEdges();
    for(auto x: outedges){
        if(!x->getDest()->getVisited()){
            if(isDAG(x->getDest())) return true;
            }
        else if(x->getDest()->getID() < 0) {
            x->getDest()->setID();
            std::cout<<x->getDest()->getID();
            return true;
        }
    }
    s->setID();
    return false;
}


int main()
{
    int V, E;
    std::cin>>V>>E;
    Graph g(V+1);
    
    for(int i=0;i<E;i++){
        int u, v; double c;
        std::cin>>u>>v>>c;
        Node *s= g.getNode(u);
        Node *e = g.getNode(v);
        Edge *new_edge = new Edge(c, s, e);
        s->addEdge(new_edge);
    }
    
    
    for(int i=1;i<V;i++){
        g._init_Node();
        std::cout<<"DFS Tree from node:" << i <<std::endl; 
        if(g.isDAG(g.getNode(i))) {
            std::cout<<std::endl<<"Contains Cycle" << std::endl;
            break;
        }
        else
            std::cout<<std::endl<<"Doesn't Contains Cycle" << std::endl;
    }
    return 0;
}


/*
    I/P:
    10 //No of Nodes
    11 // No of Edges
    1 2 100 // Edge FROM note to TO Node with cost. (From, To, Cost) 
    2 3 1
    3 4 1
    4 1 1
    1 5 1
    5 6 1
    6 7 1
    7 7 1
    7 8 1
    8 9 1
    9 10 1

*/
